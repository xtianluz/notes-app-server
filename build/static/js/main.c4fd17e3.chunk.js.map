{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","noteService","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialNotes","notesToShow","filter","map","find","n","changeNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","newNoteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAeeA,EAbF,SAAC,GAAkC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,iBACbC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,mCACA,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,U,gBCRtCK,EAAU,aA0BDC,EADK,CAACC,OAvBN,WAEX,OADgBC,IAAMC,IAAIJ,GACXK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAqBhBC,OAVd,SAAAC,GAEb,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQNI,OALtB,SAACC,EAAIH,GAElB,OADgBN,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAMH,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCT5BO,EAZM,SAAC,GAAkB,IAAfC,EAAc,EAAdA,QACrB,OAAgB,OAAZA,EACO,KAIP,qBAAKlB,UAAU,QAAf,SACKkB,KCFPC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAiGSC,EA5FH,WAEV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAGAC,qBAAU,WACN9B,EACCC,SACAG,MAAK,SAAA2B,GACJR,EAASQ,QAEb,IAEF,IA0CMC,EAAcN,EAAUJ,EAAQA,EAAMW,QAAO,SAAAzC,GAAI,OAAuB,IAAnBA,EAAKG,aAQhE,OACA,gCACE,uCACA,cAAC,EAAD,CAAcmB,QAASc,IACvB,8BACE,yBAAQ9B,QATU,WACpB6B,GAAYD,IAQV,kBACQA,EAAU,YAAc,WAGlC,6BACKM,EAAYE,KAAI,SAAA1C,GAAI,OACrB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAhEC,SAACkB,GAE1B,IAAMnB,EAAO8B,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOA,KAChC0B,EAAU,2BAAO7C,GAAP,IAAaG,WAAYH,EAAKG,YAE9CK,EACGU,OAAOC,EAAI0B,GACXjC,MAAK,SAAAkC,GACJf,EAASD,EAAMY,KAAI,SAAA1C,GAAI,OAAIA,EAAKmB,KAAOA,EAAKnB,EAAO8C,SAEpDC,OAAM,SAAAC,GACLX,EAAgB,SAAD,OACJrC,EAAKK,QADD,sCAGf4C,YAAW,WACTZ,EAAgB,QACf,KACHN,EAASD,EAAMW,QAAO,SAAAG,GAAC,OAAIA,EAAEzB,KAAMA,SA+CT+B,CAAmBlD,EAAKmB,MAF3CnB,EAAKmB,SAIhB,uBAAMgC,SA7CQ,SAACC,GACXA,EAAMC,iBACN,IAAMC,EAAgB,CACpBjD,QAAS2B,EACTuB,MAAM,IAAIC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,IAG7BnD,EACKO,OAAOuC,GACP1C,MAAK,SAAAkC,GACJf,EAASD,EAAM8B,OAAOd,IACtBb,EAAW,QAiCrB,UACE,uBAAO4B,MAAO7B,EAAS8B,SA9BF,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB5B,EAAWmB,EAAMa,OAAOJ,UA6BtB,wBAAQK,KAAK,SAAb,qBAEF,cAAC,EAAD,QCnGJC,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,U","file":"static/js/main.c4fd17e3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ( { note, toggleImportance } ) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n\r\n    return(\r\n      <>\r\n      <li className='note'>\r\n        {note.content}\r\n        <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n    \r\n    // const nonExisting = {\r\n    //     id: 10000,\r\n    //     content: 'This note is not saved to server',\r\n    //     date: '2019-05-30T17:30:31.098Z',\r\n    //     important: true,\r\n    // }\r\n    // return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst noteService = {getAll, create, update}\r\nexport default noteService","import React from \"react\";\r\n\r\nconst Notification = ( { message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","\nimport React, { useState, useEffect } from 'react'\nimport Note from './components/Note';\nimport noteService from './services/notes';\nimport './index.css'\nimport Notification from './components/Notification';\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return(\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n\n  useEffect(() => {\n      noteService\n      .getAll()\n      .then(initialNotes => {        \n        setNotes(initialNotes)\n      })\n  },[])\n\n  const toggleImportanceOf = (id) => {\n\n    const note = notes.find(n => n.id === id)\n    const changeNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changeNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 3000)\n        setNotes(notes.filter(n => n.id !==id))\n      })\n  }\n  \n  const addNote = (event) => {\n        event.preventDefault()\n        const newNoteObject = {\n          content: newNote,\n          date: new Date().toISOString(),\n          important: Math.random() < 0.5\n        }\n\n        noteService\n            .create(newNoteObject)\n            .then(returnedNote => {\n              setNotes(notes.concat(returnedNote))\n              setNewNote('')              \n            })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n  \n\n  const handleShowAll = () => {\n    setShowAll(!showAll)\n  }\n\n  return(\n  <div>\n    <h1>Notes</h1>\n    <Notification message={errorMessage} />\n    <div>\n      <button onClick={handleShowAll}>\n        Show {showAll ? 'Important' : 'All'}\n      </button>\n    </div>\n    <ul>\n        {notesToShow.map(note => \n        <Note \n          key={note.id} \n          note={note} \n          toggleImportance={() => toggleImportanceOf(note.id)}/>)}\n    </ul>\n    <form onSubmit={addNote}>\n      <input value={newNote} onChange={handleNoteChange} />\n      <button type=\"submit\">Save</button>\n    </form>\n    <Footer />\n  </div>\n  )\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n \n\nReactDOM.render(\n  \n  <App />,\n      \n  document.getElementById('root')\n);        \n  \n\n\n// const notes = [\n//   {\n//     id: 1,\n//     content: 'HTML is easy',\n//     date: '2019-05-30T17:30:31.098Z',\n//     important: true\n//   },\n//   {\n//     id: 2,\n//     content: 'Browser can execute only JavaScript',\n//     date: '2019-05-30T18:39:34.091Z',\n//     important: false\n//   },\n//   {\n//     id: 3,\n//     content: 'GET and POST are the most important methods of HTTP protocol',\n//     date: '2019-05-30T19:20:14.298Z',\n//     important: true\n//   }\n// ]\n\n\n\n\n"],"sourceRoot":""}